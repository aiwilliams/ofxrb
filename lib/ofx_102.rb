#
# DO NOT MODIFY!!!!
# This file is automatically generated by racc 1.4.5
# from racc grammer file "ofx_102.y".
#

require 'racc/parser'


require 'strscan'
#@yydebug = true


module OFXRB

  class Parser102 < Racc::Parser

module_eval <<'..end ofx_102.y modeval..id3b30bad59f', 'ofx_102.y', 21
class Property
  attr_accessor :key, :value
  def initialize(name, value)
    @key = name
    @value = value
  end
end

class Element
  attr_reader :name, :properties
  def initialize(start_name, elements, end_name)
    raise "Element #{start_name} is being closed as #{end_name}" if start_name != end_name
    @name, @properties = start_name, {}
    elements.each { |e| @properties.store(e.key, e.value) if e.is_a?(Property) }
  end
end

def name_from_ofx(tag)
  $1 if tag =~ /<\/?(\w+)>/
end

def property(val)
  Property.new(name_from_ofx(val[0]), val[1])
end

# When an OFXRB::Element has been created, the current handler will receive a
# a method send where the name is the downcased name of the OFXRB::Element.
def element(val)
  e = Element.new(name_from_ofx(val[0]), val[1], name_from_ofx(val[2]));
  @root_object.send(e.name.downcase.to_sym, e.properties)
  e
end

MATCH_TOKENS = {
  :START_TAG => /<\w+>/,
  :END_TAG => /<\/\w+>/,
  :STRING => /[^\r\n<>:]+/,
  :COLON => /:/,
}

def self.parse(ofx_doc, root_object = CreditCardStatement.new)
  new.parse(ofx_doc, root_object)
end

# Implements the Racc#parse method using a StringScanner to lex
def parse(ofx_doc, root_object)
  @root_object = root_object

  @tokens, s = [], StringScanner.new(ofx_doc)
  until s.eos?
    s.scan(/\s*/)
    MATCH_TOKENS.each do |key, value|
      if s.scan(value)
        @tokens << [key, s.matched]
        break # to consume more whitespace, move forward
      end
    end
  end

  do_parse
  @root_object
end

private
def next_token
  @tokens.shift
end
..end ofx_102.y modeval..id3b30bad59f

##### racc 1.4.5 generates ###

racc_reduce_table = [
 0, 0, :racc_error,
 2, 7, :_reduce_none,
 2, 8, :_reduce_none,
 1, 8, :_reduce_none,
 3, 10, :_reduce_4,
 2, 9, :_reduce_5,
 1, 9, :_reduce_6,
 1, 11, :_reduce_none,
 1, 11, :_reduce_none,
 2, 13, :_reduce_9,
 3, 12, :_reduce_10 ]

racc_reduce_n = 11

racc_shift_n = 19

racc_action_table = [
     1,    15,    10,    10,    10,    18,    13,     6,    14,     5,
    10,     1 ]

racc_action_check = [
     3,    10,     3,    10,    16,    16,     5,     2,     6,     1,
    11,     0 ]

racc_action_pointer = [
     9,     6,     7,    -2,   nil,     4,     8,   nil,   nil,   nil,
    -1,     6,   nil,   nil,   nil,   nil,     0,   nil,   nil ]

racc_action_default = [
   -11,   -11,   -11,   -11,    -3,   -11,   -11,    -6,    -7,    -8,
   -11,    -1,    -2,    -4,    19,    -9,   -11,    -5,   -10 ]

racc_goto_table = [
    11,    17,     4,     3,     2,    12,    17,    16 ]

racc_goto_check = [
     3,     5,     4,     2,     1,     4,     5,     3 ]

racc_goto_pointer = [
   nil,     4,     3,    -3,     2,   -10,   nil,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,     7,     8,     9 ]

racc_token_table = {
 false => 0,
 Object.new => 1,
 :STRING => 2,
 :COLON => 3,
 :START_TAG => 4,
 :END_TAG => 5 }

racc_use_result_var = true

racc_nt_base = 6

Racc_arg = [
 racc_action_table,
 racc_action_check,
 racc_action_default,
 racc_action_pointer,
 racc_goto_table,
 racc_goto_check,
 racc_goto_default,
 racc_goto_pointer,
 racc_nt_base,
 racc_reduce_table,
 racc_token_table,
 racc_shift_n,
 racc_reduce_n,
 racc_use_result_var ]

Racc_token_to_s_table = [
'$end',
'error',
'STRING',
'COLON',
'START_TAG',
'END_TAG',
'$start',
'root',
'headers',
'elements',
'key_value_pair',
'element',
'closed_element',
'one_line_element']

Racc_debug_parser = false

##### racc system variables end #####

 # reduce 0 omitted

 # reduce 1 omitted

 # reduce 2 omitted

 # reduce 3 omitted

module_eval <<'.,.,', 'ofx_102.y', 5
  def _reduce_4( val, _values, result )
@root_object.properties.store(val[0], val[2])
   result
  end
.,.,

module_eval <<'.,.,', 'ofx_102.y', 7
  def _reduce_5( val, _values, result )
result << val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'ofx_102.y', 8
  def _reduce_6( val, _values, result )
result = [val[0]]
   result
  end
.,.,

 # reduce 7 omitted

 # reduce 8 omitted

module_eval <<'.,.,', 'ofx_102.y', 11
  def _reduce_9( val, _values, result )
result = property(val)
   result
  end
.,.,

module_eval <<'.,.,', 'ofx_102.y', 12
  def _reduce_10( val, _values, result )
result = element(val)
   result
  end
.,.,

 def _reduce_none( val, _values, result )
  result
 end

  end   # class Parser102

end   # module OFXRB
